buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE"
    }
}

def vJavaLang = 1.8

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
    jcenter()
}

dependencies {
    compile "org.projectlombok:lombok:1.16.2"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "com.h2database:h2"
    compile "org.springframework.boot:spring-boot-devtools"
}

//bootRun {
//    addResources = true
//}

processResources {
    //println "processResources: $it"
    filesMatching('**/*.properties') {
        println "$it"
        ant.native2ascii(
            src: 'src/main/resources/',
            dest: processResources.destinationDir,
            includes: getPath(),
            encoding: 'UTF-8')
    }
}
processResources.destinationDir = compileJava.destinationDir

//task native2ascii << {
//    if (processResources.destinationDir.exists()) {
//        ant.delete {
//            fileset(dir: processResources.destinationDir) {
//                include(name: '*.properties')
//            }
//        }
//    }
//    ant.native2ascii(
//        src: 'src/main/resources/',
//        dest: processResources.destinationDir,
//        includes: '**/*.properties',
//        encoding: 'UTF-8')
//}
//native2ascii.dependsOn processResources
//classes.dependsOn 'native2ascii'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main")
    }
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}
